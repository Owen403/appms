const https = require("https");
const http = require("http");
const path = require("path");
const fs = require("fs");

class SimpleLyricsExtractor {
	constructor() {
		// Ch·ªâ s·ª≠ d·ª•ng API ƒë∆°n gi·∫£n kh√¥ng c·∫ßn dependencies ph·ª©c t·∫°p
		console.log("üéµ SimpleLyricsExtractor kh·ªüi t·∫°o - ch·∫ø ƒë·ªô basic");
	}

	// Tr√≠ch xu·∫•t metadata c∆° b·∫£n t·ª´ t√™n file
	async extractMetadata(filePath) {
		try {
			console.log(`üìñ ƒêang ƒë·ªçc th√¥ng tin c∆° b·∫£n t·ª´ file: ${filePath}`);

			// L·∫•y th√¥ng tin file
			const fileName = path.basename(filePath, path.extname(filePath));
			const stats = fs.statSync(filePath);

			// Th·ª≠ parse t√™n file theo format "Artist - Title"
			let artist = "Unknown Artist";
			let title = fileName;

			if (fileName.includes(" - ")) {
				const parts = fileName.split(" - ");
				if (parts.length >= 2) {
					artist = parts[0].trim();
					title = parts.slice(1).join(" - ").trim();
				}
			}

			const info = {
				title: title,
				artist: artist,
				album: "Unknown Album",
				year: null,
				duration: null, // Kh√¥ng th·ªÉ t√≠nh to√°n m√† kh√¥ng c√≥ th∆∞ vi·ªán
				genre: null,
				lyrics: null,
				fileSize: stats.size,
				fileName: fileName,
			};

			console.log(`‚úÖ Th√¥ng tin c∆° b·∫£n:`, {
				title: info.title,
				artist: info.artist,
				fileSize: `${Math.round(info.fileSize / 1024)} KB`,
			});

			return info;
		} catch (error) {
			console.error(`‚ùå L·ªói ƒë·ªçc file: ${error.message}`);
			throw error;
		}
	}

	// T√¨m l·ªùi b√†i h√°t t·ª´ API ƒë∆°n gi·∫£n
	async searchLyrics(artist, title) {
		console.log(`üîç ƒêang t√¨m l·ªùi b√†i h√°t cho: "${title}" - ${artist}`);

		try {
			// Th·ª≠ API Lyrics.ovh (mi·ªÖn ph√≠, kh√¥ng c·∫ßn key)
			const lyrics = await this.getLyricsFromOvh(artist, title);

			if (lyrics && lyrics.trim().length > 50) {
				console.log(`‚úÖ T√¨m th·∫•y l·ªùi b√†i h√°t (${lyrics.length} k√Ω t·ª±)`);
				return this.cleanLyrics(lyrics);
			}

			console.log(`‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t cho "${title}" - ${artist}`);
			return null;
		} catch (error) {
			console.error(`‚ùå L·ªói t√¨m l·ªùi: ${error.message}`);
			return null;
		}
	}

	// L·∫•y l·ªùi t·ª´ Lyrics.ovh API
	async getLyricsFromOvh(artist, title) {
		return new Promise((resolve, reject) => {
			const url = `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(title)}`;

			console.log(`üì° Th·ª≠ API: Lyrics.ovh`);

			const request = https.get(
				url,
				{
					timeout: 10000,
					headers: {
						"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
					},
				},
				(response) => {
					let data = "";

					response.on("data", (chunk) => {
						data += chunk;
					});

					response.on("end", () => {
						try {
							if (response.statusCode === 200) {
								const result = JSON.parse(data);
								if (result.lyrics) {
									resolve(result.lyrics);
								} else {
									resolve(null);
								}
							} else {
								resolve(null);
							}
						} catch (error) {
							console.log(`Parse error: ${error.message}`);
							resolve(null);
						}
					});
				},
			);

			request.on("error", (error) => {
				console.log(`Request error: ${error.message}`);
				resolve(null);
			});

			request.on("timeout", () => {
				console.log("Request timeout");
				request.destroy();
				resolve(null);
			});
		});
	}

	// L√†m s·∫°ch l·ªùi b√†i h√°t
	cleanLyrics(lyrics) {
		if (!lyrics) return null;

		return lyrics
			.replace(/\r\n/g, "\n")
			.replace(/\r/g, "\n")
			.replace(/\n{3,}/g, "\n\n")
			.trim();
	}

	// X·ª≠ l√Ω file MP3 ho√†n ch·ªânh
	async processAudioFile(filePath) {
		try {
			console.log(`\nüéµ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω file: ${path.basename(filePath)}`);

			// 1. Tr√≠ch xu·∫•t th√¥ng tin c∆° b·∫£n
			const metadata = await this.extractMetadata(filePath);

			// 2. T√¨m l·ªùi online
			const onlineLyrics = await this.searchLyrics(metadata.artist, metadata.title);
			if (onlineLyrics) {
				console.log(`‚úÖ L·ªùi b√†i h√°t t·ª´ API online`);
				return { ...metadata, lyrics: onlineLyrics, lyricsSource: "online" };
			}

			// 3. Kh√¥ng t√¨m th·∫•y l·ªùi
			console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t`);
			return { ...metadata, lyricsSource: "none" };
		} catch (error) {
			console.error(`‚ùå L·ªói x·ª≠ l√Ω file ${filePath}: ${error.message}`);
			throw error;
		}
	}
}

module.exports = SimpleLyricsExtractor;
