const express = require("express");
const multer = require("multer");
const path = require("path");
const cors = require("cors");
const fs = require("fs");
const https = require("https");
const http = require("http");
const { URL } = require("url");
const LyricsExtractor = require("./services/LyricsExtractor");
const { execFile, spawn } = require("child_process");
const { promisify } = require("util");
const execFileAsync = promisify(execFile);

// MySQL connection
const mysql = require("mysql2/promise");

const dbConfig = {
	host: "localhost",
	user: "root",
	password: "1234",
	database: "appmusic",
	waitForConnections: true,
	connectionLimit: 10,
	queueLimit: 0,
};

let db;

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static("public"));
app.use("/uploads", express.static("uploads"));

// T·∫°o th∆∞ m·ª•c uploads n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync("uploads")) {
	fs.mkdirSync("uploads");
}

// C·∫•u h√¨nh multer ƒë·ªÉ upload file
const storage = multer.diskStorage({
	destination: function (req, file, cb) {
		cb(null, "uploads/");
	},
	filename: function (req, file, cb) {
		const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
		cb(null, uniqueSuffix + path.extname(file.originalname));
	},
});

const upload = multer({
	storage: storage,
	fileFilter: function (req, file, cb) {
		if (file.fieldname === "audio") {
			if (file.mimetype.startsWith("audio/")) {
				cb(null, true);
			} else {
				cb(new Error("Ch·ªâ ch·∫•p nh·∫≠n file √¢m thanh!"), false);
			}
		} else {
			cb(null, true);
		}
	},
});

// Kh·ªüi t·∫°o LyricsExtractor
const lyricsExtractor = new LyricsExtractor();

// Helper function: Validate audio file
function validateAudioFile(filePath) {
	try {
		// Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
		if (!fs.existsSync(filePath)) {
			return {
				isValid: false,
				error: "File kh√¥ng t·ªìn t·∫°i",
				suggestion: "Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n file",
			};
		}

		// L·∫•y th√¥ng tin file
		const stats = fs.statSync(filePath);
		const fileSize = stats.size;
		const mimeType = require("mime-types").lookup(filePath);

		// Ki·ªÉm tra k√≠ch th∆∞·ªõc file (kh√¥ng ƒë∆∞·ª£c qu√° nh·ªè - d∆∞·ªõi 1KB c√≥ th·ªÉ l√† file l·ªói)
		if (fileSize < 1024) {
			return {
				isValid: false,
				error: "File qu√° nh·ªè, c√≥ th·ªÉ b·ªã l·ªói ho·∫∑c kh√¥ng ph·∫£i file audio",
				suggestion: "Vui l√≤ng ki·ªÉm tra l·∫°i file ho·∫∑c download l·∫°i",
			};
		}

		// Ki·ªÉm tra MIME type
		if (!mimeType || !mimeType.startsWith("audio/")) {
			// Ki·ªÉm tra extension l√†m backup
			const ext = path.extname(filePath).toLowerCase();
			const validExts = [".mp3", ".wav", ".ogg", ".m4a", ".flac", ".aac", ".wma", ".webm"];

			if (!validExts.includes(ext)) {
				return {
					isValid: false,
					error: `File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng audio h·ª£p l·ªá (MIME: ${mimeType || "unknown"}, ext: ${ext})`,
					suggestion: "Ch·ªâ h·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: MP3, WAV, OGG, M4A, FLAC, AAC, WMA, WEBM",
				};
			}
		}

		// File h·ª£p l·ªá
		return {
			isValid: true,
			mimeType: mimeType,
			size: fileSize,
		};
	} catch (error) {
		return {
			isValid: false,
			error: `L·ªói ki·ªÉm tra file: ${error.message}`,
			suggestion: "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c ch·ªçn file kh√°c",
		};
	}
}

// Helper function: Check if URL is YouTube
function isYouTubeURL(url) {
	try {
		const urlObj = new URL(url);
		const hostname = urlObj.hostname.toLowerCase();
		return hostname.includes("youtube.com") || hostname.includes("youtu.be");
	} catch {
		return false;
	}
}

// Helper function: Download from YouTube
async function downloadFromYouTube(url) {
	return new Promise(async (resolve, reject) => {
		try {
			console.log("üì∫ ƒêang l·∫•y th√¥ng tin video t·ª´ YouTube...");

			// ƒê∆∞·ªùng d·∫´n t·ªõi yt-dlp
			const ytdlpPath = path.join(__dirname, "bin", "yt-dlp.exe");

			// Ki·ªÉm tra yt-dlp c√≥ t·ªìn t·∫°i kh√¥ng
			if (!fs.existsSync(ytdlpPath)) {
				return reject(
					new Error("Kh√¥ng t√¨m th·∫•y yt-dlp.exe trong th∆∞ m·ª•c bin/. Vui l√≤ng c√†i ƒë·∫∑t yt-dlp tr∆∞·ªõc."),
				);
			}

			// L·∫•y th√¥ng tin video tr∆∞·ªõc
			let videoInfo;
			try {
				const { stdout } = await execFileAsync(ytdlpPath, ["--dump-json", "--no-playlist", url]);
				videoInfo = JSON.parse(stdout);
			} catch (infoError) {
				console.error("L·ªói l·∫•y th√¥ng tin video:", infoError.message);
				return reject(new Error("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin video t·ª´ YouTube"));
			}

			const videoTitle = videoInfo.title || "Unknown";
			const videoAuthor = videoInfo.uploader || videoInfo.channel || "Unknown Artist";
			const duration = videoInfo.duration || 0;

			console.log(`üéµ Video: "${videoTitle}" - ${videoAuthor} (${duration}s)`);

			// T·∫°o t√™n file
			const sanitizedTitle = videoTitle.replace(/[^a-z0-9]/gi, "_").substring(0, 50);
			const timestamp = Date.now();
			const filename = `${timestamp}-${sanitizedTitle}.mp3`;
			const filePath = path.join("uploads", filename);
			const tempPath = filePath + ".temp";

			console.log("üì• B·∫Øt ƒë·∫ßu download audio t·ª´ YouTube...");

			// Download audio v·ªõi yt-dlp
			const ytdlpProcess = spawn(ytdlpPath, [
				"-f",
				"bestaudio/best",
				"-x", // Extract audio
				"--audio-format",
				"mp3",
				"--audio-quality",
				"0", // Best quality
				"--no-playlist",
				"-o",
				tempPath,
				"--no-part", // Kh√¥ng t·∫°o .part file
				"--progress",
				url,
			]);

			let progressData = "";
			let hasError = false;
			let errorMessage = "";

			ytdlpProcess.stdout.on("data", (data) => {
				const output = data.toString();
				progressData += output;

				// Parse progress n·∫øu c√≥
				const percentMatch = output.match(/(\d+\.?\d*)%/);
				if (percentMatch) {
					console.log(`üì• Downloading: ${percentMatch[1]}%`);
				}
			});

			ytdlpProcess.stderr.on("data", (data) => {
				const error = data.toString();
				console.error("yt-dlp error:", error);
				errorMessage += error;
				hasError = true;
			});

			ytdlpProcess.on("close", (code) => {
				if (code === 0 && !hasError) {
					// yt-dlp t·ª± ƒë·ªông th√™m extension, n√™n file th·ª±c t·∫ø l√† .mp3
					const actualFile = tempPath.replace(/\.temp$/, "") + ".mp3";

					// T√¨m file ƒë√£ download (yt-dlp c√≥ th·ªÉ th√™m extension kh√°c nhau)
					let downloadedFilePath = null;
					const possibleFiles = [tempPath + ".mp3", tempPath, filePath, tempPath.replace(".temp", "")];

					for (const possibleFile of possibleFiles) {
						if (fs.existsSync(possibleFile)) {
							downloadedFilePath = possibleFile;
							break;
						}
					}

					if (!downloadedFilePath) {
						return reject(new Error("Kh√¥ng t√¨m th·∫•y file ƒë√£ download"));
					}

					// ƒê·ªïi t√™n file v·ªÅ ƒë√∫ng format n·∫øu c·∫ßn
					if (downloadedFilePath !== filePath) {
						try {
							fs.renameSync(downloadedFilePath, filePath);
							downloadedFilePath = filePath;
						} catch (renameError) {
							console.log("Kh√¥ng th·ªÉ rename, s·ª≠ d·ª•ng file g·ªëc");
						}
					}

					const stats = fs.statSync(downloadedFilePath);
					console.log(`‚úÖ Download ho√†n t·∫•t t·ª´ YouTube: ${downloadedFilePath} (${stats.size} bytes)`);

					resolve({
						filePath: downloadedFilePath,
						title: videoTitle,
						artist: videoAuthor,
						size: stats.size,
						duration: duration,
					});
				} else {
					reject(new Error(`yt-dlp failed v·ªõi code ${code}: ${errorMessage || "Unknown error"}`));
				}
			});

			ytdlpProcess.on("error", (error) => {
				reject(new Error(`L·ªói ch·∫°y yt-dlp: ${error.message}`));
			});
		} catch (error) {
			reject(new Error(`L·ªói YouTube: ${error.message}`));
		}
	});
}

// Kh·ªüi t·∫°o database v√† server
async function startServer() {
	try {
		console.log("üîÑ ƒêang k·∫øt n·ªëi MySQL...");

		// Th·ª≠ k·∫øt n·ªëi m√† kh√¥ng ch·ªâ ƒë·ªãnh database tr∆∞·ªõc
		const tempConnection = await mysql.createConnection({
			host: dbConfig.host,
			user: dbConfig.user,
			password: dbConfig.password,
		});

		// T·∫°o database n·∫øu ch∆∞a t·ªìn t·∫°i
		await tempConnection.execute(
			`CREATE DATABASE IF NOT EXISTS ${dbConfig.database} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci`,
		);
		console.log("‚úÖ Database appmusic ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra!");

		await tempConnection.end();

		// K·∫øt n·ªëi v·ªõi database
		db = mysql.createPool(dbConfig);

		// T·∫°o b·∫£ng songs
		await db.execute(`
            CREATE TABLE IF NOT EXISTS songs (
                id INT AUTO_INCREMENT PRIMARY KEY,
                title VARCHAR(255) NOT NULL,
                artist VARCHAR(255) NOT NULL,
                file_path VARCHAR(500) NOT NULL,
                lyrics TEXT,
                synced_lyrics TEXT,
                duration INT DEFAULT NULL,
                file_size BIGINT DEFAULT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
        `);
		console.log("‚úÖ B·∫£ng songs ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra!");

		// Th√™m c·ªôt file_size n·∫øu ch∆∞a t·ªìn t·∫°i (cho b·∫£ng c≈©)
		try {
			await db.execute(`
				ALTER TABLE songs 
				ADD COLUMN file_size BIGINT DEFAULT NULL
			`);
			console.log("‚úÖ ƒê√£ th√™m c·ªôt file_size v√†o b·∫£ng songs");
		} catch (alterError) {
			// B·ªè qua l·ªói n·∫øu c·ªôt ƒë√£ t·ªìn t·∫°i
			if (alterError.code === "ER_DUP_FIELDNAME") {
				console.log("‚ÑπÔ∏è C·ªôt file_size ƒë√£ t·ªìn t·∫°i");
			} else {
				console.log("‚ö†Ô∏è L·ªói khi th√™m c·ªôt file_size:", alterError.message);
			}
		}

		// Th√™m c·ªôt synced_lyrics n·∫øu ch∆∞a t·ªìn t·∫°i
		try {
			await db.execute(`
				ALTER TABLE songs 
				ADD COLUMN synced_lyrics TEXT DEFAULT NULL
			`);
			console.log("‚úÖ ƒê√£ th√™m c·ªôt synced_lyrics v√†o b·∫£ng songs");
		} catch (alterError) {
			if (alterError.code === "ER_DUP_FIELDNAME") {
				console.log("‚ÑπÔ∏è C·ªôt synced_lyrics ƒë√£ t·ªìn t·∫°i");
			} else {
				console.log("‚ö†Ô∏è L·ªói khi th√™m c·ªôt synced_lyrics:", alterError.message);
			}
		}

		// Kh·ªüi ƒë·ªông server
		app.listen(PORT, () => {
			console.log(`üéµ Server ƒëang ch·∫°y tr√™n port ${PORT}`);
			console.log(`üåê Truy c·∫≠p ·ª©ng d·ª•ng t·∫°i: http://localhost:${PORT}`);
			console.log(`üìä Database: MySQL - ${dbConfig.database}`);
		});
	} catch (error) {
		console.error("‚ùå L·ªói kh·ªüi ƒë·ªông server:", error.message);
		if (error.code === "ECONNREFUSED") {
			console.log("üí° H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:");
			console.log("1. Ki·ªÉm tra MySQL service ƒë√£ ch·∫°y ch∆∞a");
			console.log("2. Ki·ªÉm tra th√¥ng tin k·∫øt n·ªëi trong server.js");
			console.log("3. Ch·∫°y l·ªánh: net start mysql (Windows)");
		}
		process.exit(1);
	}
}

// Routes
app.get("/", (req, res) => {
	res.sendFile(path.join(__dirname, "public", "index.html"));
});

// API ƒë·ªÉ l·∫•y danh s√°ch b√†i h√°t
app.get("/api/songs", async (req, res) => {
	try {
		const [rows] = await db.execute("SELECT * FROM songs ORDER BY created_at DESC");
		res.json(rows);
	} catch (error) {
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ l·∫•y th√¥ng tin m·ªôt b√†i h√°t
app.get("/api/songs/:id", async (req, res) => {
	try {
		const id = req.params.id;
		const [rows] = await db.execute("SELECT * FROM songs WHERE id = ?", [id]);

		if (rows.length === 0) {
			res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
			return;
		}

		res.json(rows[0]);
	} catch (error) {
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ upload b√†i h√°t
app.post("/api/upload", upload.single("audio"), async (req, res) => {
	if (!req.file) {
		return res.status(400).json({ error: "Vui l√≤ng ch·ªçn file nh·∫°c" });
	}

	let { title, artist, lyrics, autoExtract } = req.body;
	const filePath = req.file.path;

	// Validate file l√† audio
	const validation = validateAudioFile(filePath);
	if (!validation.isValid) {
		return res.status(400).json({
			error: validation.error,
			suggestion: validation.suggestion,
		});
	}

	try {
		let finalTitle = title;
		let finalArtist = artist;
		let finalLyrics = lyrics || "";
		let extractionInfo = {};

		// N·∫øu b·∫≠t t·ª± ƒë·ªông tr√≠ch xu·∫•t ho·∫∑c thi·∫øu th√¥ng tin
		if (autoExtract === "true" || !title || !artist) {
			console.log(`\nüéµ T·ª± ƒë·ªông tr√≠ch xu·∫•t th√¥ng tin t·ª´: ${req.file.originalname}`);

			try {
				const metadata = await lyricsExtractor.processAudioFile(filePath);

				// S·ª≠ d·ª•ng th√¥ng tin t·ª´ metadata n·∫øu kh√¥ng c√≥ input t·ª´ user
				finalTitle = title || metadata.title || req.file.originalname;
				finalArtist = artist || metadata.artist || "Unknown Artist";

				// S·ª≠ d·ª•ng l·ªùi t·ª´ metadata/API n·∫øu user kh√¥ng nh·∫≠p
				if (!lyrics && metadata.lyrics) {
					finalLyrics = metadata.lyrics;
					extractionInfo = {
						lyricsFound: true,
						lyricsSource: metadata.lyricsSource,
						duration: metadata.duration,
						album: metadata.album,
						year: metadata.year,
						genre: metadata.genre,
					};
				} else {
					extractionInfo = {
						lyricsFound: false,
						lyricsSource: metadata.lyricsSource || "none",
						duration: metadata.duration,
						album: metadata.album,
						year: metadata.year,
						genre: metadata.genre,
					};
				}

				console.log(`‚úÖ Tr√≠ch xu·∫•t ho√†n t·∫•t: "${finalTitle}" - ${finalArtist}`);
			} catch (extractError) {
				console.error(`‚ùå L·ªói tr√≠ch xu·∫•t: ${extractError.message}`);
				// V·∫´n ti·∫øp t·ª•c v·ªõi th√¥ng tin c√≥ s·∫µn
				finalTitle = title || req.file.originalname;
				finalArtist = artist || "Unknown Artist";
				extractionInfo = { error: extractError.message };
			}
		}

		// Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
		if (!finalTitle || !finalArtist) {
			return res.status(400).json({
				error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b√†i h√°t ho·∫∑c b·∫≠t t·ª± ƒë·ªông tr√≠ch xu·∫•t",
			});
		}

		// L∆∞u v√†o database
		const fileStats = fs.statSync(filePath);
		const [result] = await db.execute(
			`INSERT INTO songs (title, artist, file_path, lyrics, duration, file_size) VALUES (?, ?, ?, ?, ?, ?)`,
			[finalTitle, finalArtist, filePath, finalLyrics, extractionInfo.duration || null, fileStats.size],
		);

		res.json({
			id: result.insertId,
			title: finalTitle,
			artist: finalArtist,
			file_path: filePath,
			lyrics: finalLyrics,
			duration: extractionInfo.duration,
			extraction: extractionInfo,
			message: "Upload th√†nh c√¥ng!",
		});
	} catch (error) {
		// X√≥a file n·∫øu c√≥ l·ªói
		fs.unlink(filePath, (unlinkErr) => {
			if (unlinkErr) console.log("Kh√¥ng th·ªÉ x√≥a file:", unlinkErr);
		});

		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ x√≥a b√†i h√°t
app.delete("/api/songs/:id", async (req, res) => {
	try {
		const id = req.params.id;

		// L·∫•y th√¥ng tin file tr∆∞·ªõc khi x√≥a
		const [rows] = await db.execute("SELECT file_path FROM songs WHERE id = ?", [id]);

		if (rows.length > 0) {
			// X√≥a file kh·ªèi h·ªá th·ªëng
			fs.unlink(rows[0].file_path, (err) => {
				if (err) console.log("Kh√¥ng th·ªÉ x√≥a file:", err);
			});
		}

		// X√≥a record kh·ªèi database
		await db.execute("DELETE FROM songs WHERE id = ?", [id]);
		res.json({ message: "ƒê√£ x√≥a b√†i h√°t th√†nh c√¥ng" });
	} catch (error) {
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ t√¨m l·ªùi b√†i h√°t cho b√†i h√°t ƒë√£ c√≥
app.post("/api/songs/:id/find-lyrics", async (req, res) => {
	try {
		const id = req.params.id;

		// L·∫•y th√¥ng tin b√†i h√°t
		const [songs] = await db.execute("SELECT * FROM songs WHERE id = ?", [id]);

		if (songs.length === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
		}

		const song = songs[0];
		console.log(`üîç T√¨m l·ªùi cho b√†i h√°t: "${song.title}" - ${song.artist}`);

		// T√¨m l·ªùi b√†i h√°t
		const lyrics = await lyricsExtractor.searchLyrics(song.artist, song.title);

		if (lyrics) {
			// C·∫≠p nh·∫≠t l·ªùi v√†o database
			await db.execute("UPDATE songs SET lyrics = ? WHERE id = ?", [lyrics, id]);

			res.json({
				success: true,
				lyrics: lyrics,
				message: `ƒê√£ t√¨m th·∫•y v√† c·∫≠p nh·∫≠t l·ªùi cho "${song.title}"`,
			});
		} else {
			res.json({
				success: false,
				lyrics: null,
				message: `Kh√¥ng t√¨m th·∫•y l·ªùi cho "${song.title}" - ${song.artist}`,
			});
		}
	} catch (error) {
		console.error("L·ªói t√¨m l·ªùi:", error);
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ c·∫≠p nh·∫≠t synced lyrics
app.post("/api/songs/:id/update-synced-lyrics", async (req, res) => {
	try {
		const id = req.params.id;
		const { synced_lyrics } = req.body;

		// Validate synced lyrics format (basic check)
		if (synced_lyrics && synced_lyrics.trim() !== "") {
			// Check if it contains LRC format timestamps
			const hasValidFormat = /\[\d{2}:\d{2}\.\d{2}\]/.test(synced_lyrics);
			if (!hasValidFormat) {
				return res.status(400).json({
					error: "Format synced lyrics kh√¥ng h·ª£p l·ªá. Ph·∫£i c√≥ d·∫°ng [mm:ss.xx] text",
				});
			}
		}

		// Update synced lyrics
		await db.execute("UPDATE songs SET synced_lyrics = ? WHERE id = ?", [synced_lyrics || null, id]);

		res.json({
			success: true,
			message: "ƒê√£ c·∫≠p nh·∫≠t synced lyrics th√†nh c√¥ng",
		});
	} catch (error) {
		console.error("L·ªói c·∫≠p nh·∫≠t synced lyrics:", error);
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ ph√¢n t√≠ch file nh·∫°c v√† l·∫•y metadata
app.post("/api/analyze-audio", upload.single("audio"), async (req, res) => {
	if (!req.file) {
		return res.status(400).json({ error: "Vui l√≤ng ch·ªçn file nh·∫°c" });
	}

	try {
		console.log(`üéµ Ph√¢n t√≠ch file: ${req.file.originalname}`);
		const metadata = await lyricsExtractor.processAudioFile(req.file.path);

		// X√≥a file t·∫°m sau khi ph√¢n t√≠ch
		fs.unlink(req.file.path, (err) => {
			if (err) console.log("Kh√¥ng th·ªÉ x√≥a file t·∫°m:", err);
		});

		res.json({
			success: true,
			metadata: metadata,
			message: "Ph√¢n t√≠ch ho√†n t·∫•t",
		});
	} catch (error) {
		// X√≥a file t·∫°m n·∫øu c√≥ l·ªói
		fs.unlink(req.file.path, (err) => {
			if (err) console.log("Kh√¥ng th·ªÉ x√≥a file t·∫°m:", err);
		});

		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ t√¨m l·ªùi b√†i h√°t theo t√™n v√† ngh·ªá sƒ©
app.post("/api/search-lyrics", async (req, res) => {
	const { artist, title } = req.body;

	if (!artist || !title) {
		return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p t√™n b√†i h√°t v√† ngh·ªá sƒ©" });
	}

	try {
		console.log(`üîç T√¨m l·ªùi cho: "${title}" - ${artist}`);
		const lyrics = await lyricsExtractor.searchLyrics(artist, title);

		if (lyrics) {
			res.json({
				success: true,
				lyrics: lyrics,
				message: `T√¨m th·∫•y l·ªùi cho "${title}" - ${artist}`,
			});
		} else {
			res.json({
				success: false,
				lyrics: null,
				message: `Kh√¥ng t√¨m th·∫•y l·ªùi cho "${title}" - ${artist}`,
			});
		}
	} catch (error) {
		res.status(500).json({ error: error.message });
	}
});

// API ƒë·ªÉ upload nh·∫°c t·ª´ URL
app.post("/api/upload-url", async (req, res) => {
	const { url, title, artist, lyrics, autoExtract } = req.body;

	if (!url) {
		return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p URL" });
	}

	let downloadedFile = null;

	try {
		// Validate URL
		try {
			new URL(url);
		} catch (urlError) {
			return res.status(400).json({ error: "URL kh√¥ng h·ª£p l·ªá" });
		}

		console.log(`üåê B·∫Øt ƒë·∫ßu download t·ª´ URL: ${url}`);

		let downloadResult;
		let finalTitle = title;
		let finalArtist = artist;

		// Ki·ªÉm tra n·∫øu l√† YouTube URL
		if (isYouTubeURL(url)) {
			console.log("üì∫ Ph√°t hi·ªán URL YouTube, s·ª≠ d·ª•ng ytdl-core...");

			try {
				downloadResult = await downloadFromYouTube(url);
				downloadedFile = downloadResult.filePath;

				// N·∫øu kh√¥ng c√≥ title/artist t·ª´ user, d√πng t·ª´ YouTube
				if (!finalTitle) finalTitle = downloadResult.title;
				if (!finalArtist) finalArtist = downloadResult.artist;

				console.log(`‚úÖ Download t·ª´ YouTube th√†nh c√¥ng: ${downloadedFile}`);
			} catch (ytError) {
				console.error(`‚ùå L·ªói download YouTube: ${ytError.message}`);
				return res.status(400).json({
					error: `Kh√¥ng th·ªÉ download t·ª´ YouTube: ${ytError.message}`,
					suggestion: "Vui l√≤ng ki·ªÉm tra l·∫°i URL YouTube ho·∫∑c th·ª≠ URL kh√°c",
				});
			}
		} else {
			// Download t·ª´ URL th√¥ng th∆∞·ªùng
			const filename = getFilenameFromURL(url);
			downloadResult = await downloadFileFromURL(url, filename);
			downloadedFile = downloadResult.filePath;

			// Validate file l√† audio tr∆∞·ªõc khi x·ª≠ l√Ω
			console.log(`üîç ƒêang ki·ªÉm tra ƒë·ªãnh d·∫°ng file: ${downloadedFile}`);
			const validation = validateAudioFile(downloadedFile);

			if (!validation.isValid) {
				// X√≥a file kh√¥ng h·ª£p l·ªá
				fs.unlink(downloadedFile, (err) => {
					if (err) console.log("Kh√¥ng th·ªÉ x√≥a file:", err);
				});

				return res.status(400).json({
					error: `‚ùå ${validation.error}`,
					suggestion: `üí° ${validation.suggestion}`,
					details: "File ƒë∆∞·ª£c download kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng audio h·ª£p l·ªá",
				});
			}

			console.log(`‚úÖ File validation OK: ${validation.format || "Audio"}`);
		}
		const stats = fs.statSync(downloadedFile);
		if (stats.size === 0) {
			throw new Error("File download b·ªã l·ªói (0 bytes)");
		}

		// Gi·ªõi h·∫°n k√≠ch th∆∞·ªõc file: 50MB
		const maxSize = 50 * 1024 * 1024; // 50MB
		if (stats.size > maxSize) {
			throw new Error(`File qu√° l·ªõn (gi·ªõi h·∫°n 50MB)`);
		}

		console.log(`üìÅ File ƒë√£ download: ${downloadedFile} (${stats.size} bytes)`);

		// X·ª≠ l√Ω gi·ªëng nh∆∞ upload file th√¥ng th∆∞·ªùng
		let finalLyrics = lyrics || "";
		let extractionInfo = {};

		// Auto extract n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu ho·∫∑c thi·∫øu th√¥ng tin
		if (autoExtract === true || autoExtract === "true" || !finalTitle || !finalArtist) {
			try {
				console.log(`üéµ T·ª± ƒë·ªông tr√≠ch xu·∫•t metadata t·ª´ file audio h·ª£p l·ªá`);
				const metadata = await lyricsExtractor.processAudioFile(downloadedFile);

				// ∆Øu ti√™n th√¥ng tin user nh·∫≠p > metadata file > fallback
				if (!finalTitle)
					finalTitle = metadata.title || path.basename(downloadedFile, path.extname(downloadedFile));
				if (!finalArtist) finalArtist = metadata.artist || "Unknown Artist";

				if (!lyrics && metadata.lyrics) {
					finalLyrics = metadata.lyrics;
				}

				extractionInfo = {
					lyricsFound: !!metadata.lyrics,
					lyricsSource: metadata.lyricsSource,
					duration: metadata.duration,
					album: metadata.album,
					year: metadata.year,
					genre: metadata.genre,
					fileSize: stats.size,
				};

				console.log(`‚úÖ Tr√≠ch xu·∫•t ho√†n t·∫•t: "${finalTitle}" - ${finalArtist}`);
			} catch (extractError) {
				console.error(`‚ùå L·ªói tr√≠ch xu·∫•t: ${extractError.message}`);
				if (!finalTitle) finalTitle = path.basename(downloadedFile, path.extname(downloadedFile));
				if (!finalArtist) finalArtist = "Unknown Artist";
				extractionInfo = {
					error: extractError.message,
					fileSize: stats.size,
				};
			}
		}

		// Ki·ªÉm tra th√¥ng tin b·∫Øt bu·ªôc
		if (!finalTitle || !finalArtist) {
			throw new Error("Thi·∫øu th√¥ng tin b√†i h√°t (t√™n ho·∫∑c ngh·ªá sƒ©)");
		}

		// L∆∞u v√†o database
		const [result] = await db.execute(
			`INSERT INTO songs (title, artist, file_path, lyrics, duration, file_size) VALUES (?, ?, ?, ?, ?, ?)`,
			[finalTitle, finalArtist, downloadedFile, finalLyrics, extractionInfo.duration || null, stats.size],
		);

		res.json({
			id: result.insertId,
			title: finalTitle,
			artist: finalArtist,
			file_path: downloadedFile,
			lyrics: finalLyrics,
			duration: extractionInfo.duration,
			fileSize: stats.size,
			extraction: extractionInfo,
			source: "url",
			originalUrl: url,
			message: "Upload t·ª´ URL th√†nh c√¥ng!",
		});
	} catch (error) {
		console.error("L·ªói upload t·ª´ URL:", error);

		// X√≥a file ƒë√£ download n·∫øu c√≥ l·ªói
		if (downloadedFile && fs.existsSync(downloadedFile)) {
			fs.unlink(downloadedFile, (unlinkErr) => {
				if (unlinkErr) console.log("Kh√¥ng th·ªÉ x√≥a file:", unlinkErr);
			});
		}

		res.status(500).json({
			error: error.message,
			details: "L·ªói khi download ho·∫∑c x·ª≠ l√Ω file t·ª´ URL",
		});
	}
});

// H√†m download file t·ª´ URL
async function downloadFileFromURL(url, filename) {
	return new Promise((resolve, reject) => {
		try {
			const parsedUrl = new URL(url);
			const protocol = parsedUrl.protocol === "https:" ? https : http;

			const request = protocol.get(
				url,
				{
					timeout: 30000,
					headers: {
						"User-Agent":
							"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
					},
				},
				(response) => {
					// Ki·ªÉm tra redirect
					if (response.statusCode >= 300 && response.statusCode < 400 && response.headers.location) {
						return downloadFileFromURL(response.headers.location, filename)
							.then(resolve)
							.catch(reject);
					}

					if (response.statusCode !== 200) {
						reject(new Error(`HTTP ${response.statusCode}: ${response.statusMessage}`));
						return;
					}

					// Ki·ªÉm tra content type
					const contentType = response.headers["content-type"] || "";
					if (!contentType.startsWith("audio/") && !contentType.startsWith("video/")) {
						console.log(`‚ö†Ô∏è Warning: Content-Type l√† ${contentType}, kh√¥ng ph·∫£i audio`);
					}

					const filePath = path.join("uploads", filename);
					const fileStream = fs.createWriteStream(filePath);

					let downloadedBytes = 0;
					const totalBytes = parseInt(response.headers["content-length"] || "0");

					response.on("data", (chunk) => {
						downloadedBytes += chunk.length;
						if (totalBytes > 0) {
							const progress = Math.round((downloadedBytes / totalBytes) * 100);
							if (progress % 10 === 0) {
								console.log(
									`üì• Download progress: ${progress}% (${downloadedBytes}/${totalBytes} bytes)`,
								);
							}
						}
					});

					response.pipe(fileStream);

					fileStream.on("finish", () => {
						fileStream.close();
						console.log(`‚úÖ Download ho√†n t·∫•t: ${filePath} (${downloadedBytes} bytes)`);
						resolve({
							filePath: filePath,
							size: downloadedBytes,
							contentType: contentType,
						});
					});

					fileStream.on("error", (error) => {
						fs.unlink(filePath, () => {}); // X√≥a file l·ªói
						reject(error);
					});
				},
			);

			request.on("timeout", () => {
				request.destroy();
				reject(new Error("Download timeout (30s)"));
			});

			request.on("error", (error) => {
				reject(error);
			});
		} catch (error) {
			reject(error);
		}
	});
}

// H√†m t·∫°o filename t·ª´ URL
function getFilenameFromURL(url, contentType = "") {
	try {
		const parsedUrl = new URL(url);
		let filename = path.basename(parsedUrl.pathname);

		// N·∫øu kh√¥ng c√≥ extension, th√™m d·ª±a v√†o content-type
		if (!path.extname(filename) && contentType) {
			if (contentType.includes("mp3")) filename += ".mp3";
			else if (contentType.includes("wav")) filename += ".wav";
			else if (contentType.includes("ogg")) filename += ".ogg";
			else if (contentType.includes("m4a")) filename += ".m4a";
			else filename += ".mp3"; // default
		}

		// N·∫øu v·∫´n kh√¥ng c√≥ filename h·ª£p l·ªá
		if (!filename || filename === "/" || filename === ".mp3") {
			const timestamp = Date.now();
			filename = `audio-${timestamp}.mp3`;
		}

		// L√†m s·∫°ch filename
		filename = filename.replace(/[^a-zA-Z0-9.-]/g, "_");

		// Th√™m timestamp ƒë·ªÉ tr√°nh tr√πng l·∫∑p
		const ext = path.extname(filename);
		const basename = path.basename(filename, ext);
		const timestamp = Date.now() + "-" + Math.round(Math.random() * 1000);

		return `${timestamp}-${basename}${ext}`;
	} catch (error) {
		const timestamp = Date.now();
		return `audio-${timestamp}.mp3`;
	}
}

// ========== PLAYLIST ROUTES ==========

// L·∫•y t·∫•t c·∫£ playlists
app.get("/api/playlists", async (req, res) => {
	try {
		const [playlists] = await db.query(`
			SELECT p.*, 
				COUNT(ps.id) as song_count
			FROM playlists p
			LEFT JOIN playlist_songs ps ON p.id = ps.playlist_id
			GROUP BY p.id
			ORDER BY p.created_at DESC
		`);
		res.json(playlists);
	} catch (error) {
		console.error("L·ªói l·∫•y danh s√°ch playlists:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// T·∫°o playlist m·ªõi
app.post("/api/playlists", async (req, res) => {
	try {
		const { name, description } = req.body;

		if (!name || name.trim() === "") {
			return res.status(400).json({ error: "T√™n playlist kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
		}

		const [result] = await db.query("INSERT INTO playlists (name, description) VALUES (?, ?)", [
			name.trim(),
			description || "",
		]);

		res.json({
			success: true,
			message: "T·∫°o playlist th√†nh c√¥ng!",
			playlistId: result.insertId,
		});
	} catch (error) {
		console.error("L·ªói t·∫°o playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// L·∫•y chi ti·∫øt playlist v·ªõi danh s√°ch b√†i h√°t
app.get("/api/playlists/:id", async (req, res) => {
	try {
		const { id } = req.params;

		// L·∫•y th√¥ng tin playlist
		const [playlists] = await db.query("SELECT * FROM playlists WHERE id = ?", [id]);

		if (playlists.length === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y playlist" });
		}

		// L·∫•y danh s√°ch b√†i h√°t trong playlist
		const [songs] = await db.query(
			`
			SELECT s.*, ps.position, ps.added_at
			FROM songs s
			INNER JOIN playlist_songs ps ON s.id = ps.song_id
			WHERE ps.playlist_id = ?
			ORDER BY ps.position ASC, ps.added_at ASC
		`,
			[id],
		);

		res.json({
			...playlists[0],
			songs: songs,
		});
	} catch (error) {
		console.error("L·ªói l·∫•y chi ti·∫øt playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// Th√™m b√†i h√°t v√†o playlist
app.post("/api/playlists/:id/songs", async (req, res) => {
	try {
		const { id } = req.params;
		const { songId } = req.body;

		if (!songId) {
			return res.status(400).json({ error: "Thi·∫øu songId" });
		}

		// Ki·ªÉm tra playlist t·ªìn t·∫°i
		const [playlists] = await db.query("SELECT id FROM playlists WHERE id = ?", [id]);
		if (playlists.length === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y playlist" });
		}

		// Ki·ªÉm tra b√†i h√°t t·ªìn t·∫°i
		const [songs] = await db.query("SELECT id, title FROM songs WHERE id = ?", [songId]);
		if (songs.length === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h√°t" });
		}

		// L·∫•y position cao nh·∫•t
		const [maxPos] = await db.query(
			"SELECT COALESCE(MAX(position), -1) as max_position FROM playlist_songs WHERE playlist_id = ?",
			[id],
		);
		const newPosition = maxPos[0].max_position + 1;

		// Th√™m v√†o playlist
		await db.query(
			"INSERT INTO playlist_songs (playlist_id, song_id, position) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE position = VALUES(position)",
			[id, songId, newPosition],
		);

		res.json({
			success: true,
			message: `ƒê√£ th√™m "${songs[0].title}" v√†o playlist`,
		});
	} catch (error) {
		console.error("L·ªói th√™m b√†i h√°t v√†o playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// X√≥a b√†i h√°t kh·ªèi playlist
app.delete("/api/playlists/:playlistId/songs/:songId", async (req, res) => {
	try {
		const { playlistId, songId } = req.params;

		const [result] = await db.query("DELETE FROM playlist_songs WHERE playlist_id = ? AND song_id = ?", [
			playlistId,
			songId,
		]);

		if (result.affectedRows === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y b√†i h√°t trong playlist" });
		}

		res.json({
			success: true,
			message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi playlist",
		});
	} catch (error) {
		console.error("L·ªói x√≥a b√†i h√°t kh·ªèi playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// X√≥a playlist
app.delete("/api/playlists/:id", async (req, res) => {
	try {
		const { id } = req.params;

		const [result] = await db.query("DELETE FROM playlists WHERE id = ?", [id]);

		if (result.affectedRows === 0) {
			return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y playlist" });
		}

		res.json({
			success: true,
			message: "ƒê√£ x√≥a playlist",
		});
	} catch (error) {
		console.error("L·ªói x√≥a playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// C·∫≠p nh·∫≠t th√¥ng tin playlist
app.put("/api/playlists/:id", async (req, res) => {
	try {
		const { id } = req.params;
		const { name, description } = req.body;

		if (!name || name.trim() === "") {
			return res.status(400).json({ error: "T√™n playlist kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
		}

		await db.query("UPDATE playlists SET name = ?, description = ? WHERE id = ?", [
			name.trim(),
			description || "",
			id,
		]);

		res.json({
			success: true,
			message: "C·∫≠p nh·∫≠t playlist th√†nh c√¥ng",
		});
	} catch (error) {
		console.error("L·ªói c·∫≠p nh·∫≠t playlist:", error);
		res.status(500).json({ error: "L·ªói server" });
	}
});

// ========== END PLAYLIST ROUTES ==========

// Kh·ªüi ƒë·ªông server
startServer();

// Graceful shutdown
process.on("SIGINT", async () => {
	console.log("\nƒêang ƒë√≥ng server...");
	try {
		if (db) {
			await db.end();
		}
		console.log("ƒê√£ ƒë√≥ng k·∫øt n·ªëi database.");
		process.exit(0);
	} catch (error) {
		console.error("L·ªói khi ƒë√≥ng database:", error);
		process.exit(1);
	}
});
